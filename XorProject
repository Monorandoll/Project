```
section .data
        Plain dd 'hello', 0xA, 0h
        Pass dd 'MARCH', 0xA, 0h
        filename db 'output.txt', 0h

        content db 'Plain Text:', 0h
        len equ $ - content

        content2 db 'Key:', 0h
        len2 equ $ - content2

        content3 db 'Encrypted:', 0xA, 0h
        len3 equ $ - content3

        content4 db 'Decrypted:', 0h
        len4 equ $ - content4

        space db 0xA,0h

        newline db 10, 0h

 section .bss
      fd_out resd 1
      result resb 6  ; stores the encrypted data
      hold resb 6    ; stores the decrypted data

 section .text
      global _start
 _start:
      ; creating
        mov eax, 8
        mov ebx, filename
        mov ecx, 0711o
        int 0x80

      ; opening file
        mov eax, 5
        mov ebx, filename
        mov ecx, 2
        mov edx, 0777o
        int 0x80

        mov [fd_out], eax

      ; encrypt
        mov eax, 5  ; counter
        mov ecx, Plain
        mov edx, Pass
        mov ebx, result
 encrypt_loop:
        mov esi, [ecx]  ; loading the next 4 bytes
        xor esi, [edx]  ; xor operation between the text and key
        mov [ebx], esi  ; storing the data back into result
        add ecx, 4  ; moving to the next letter
        add edx, 4
        add ebx, 4
        dec eax   ; decrement the counter for the jnz
        jnz encrypt_loop

      ; decrypt
        mov eax, 5  ; counter
        mov ecx, result
        mov edx, Pass
        mov ebx, hold
  decrypt_loop:
        mov esi, [ecx]  ; loading the next 4 bytes
        xor esi, [edx]  ; xor operation between the txt and key
        mov [ebx], esi  ; storing the data back into hold
        add ecx, 4  ; moving to the next letter
        add edx, 4
        add ebx, 4
        dec eax   ; decrement the counter
        jnz decrypt_loop

       ;write to file
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, content
        mov edx, len
        int 0x80

      ; print Plaindata
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, Plain
        mov edx, 5
        int 0x80

      ; newline
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, newline
        mov edx, 1
        int 0x80

      ; printing key label
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, content2
        mov edx, len2
        int 0x80

      ; print keydata
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, Pass
        mov edx, 5
        int 0x80

      ; newline
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, space
        mov edx, 1
        int 0x80

      ; write encrypted label
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, content3
        mov edx, 10
        int 0x80

      ; print encrypted data
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, result
        mov edx, 5
        int 0x80

      ; newline
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, space
        mov edx, 1
        int 0x80

      ; print Decrypted Label
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, content4
        mov edx, len4
        int 0x80

      ; print decrypted data
        mov eax, 4
        mov ebx, [fd_out]
        mov ecx, hold
        mov edx, 5
        int 0x80

  exit:
        mov eax, 1
        int 0x80
```
